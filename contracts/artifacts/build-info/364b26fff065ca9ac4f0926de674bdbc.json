{
	"id": "364b26fff065ca9ac4f0926de674bdbc",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.6.12",
	"solcLongVersion": "0.6.12+commit.27d51765",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/dETH.sol": {
				"content": "// // SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.2;\r\n\r\n// import \"./IterableMapping.sol\";\r\n\r\n// /**\r\n//  * @dev Interface of the ERC20 standard as defined in the EIP.\r\n//  */\r\n// interface IERC20 {\r\n\r\n//     function totalSupply() external view returns (uint256);\r\n\r\n//     function balanceOf(address account) external view returns (uint256);\r\n\r\n//     function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n//     function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n//     function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n//     function transferFrom(\r\n//         address sender,\r\n//         address recipient,\r\n//         uint256 amount\r\n//     ) external returns (bool);\r\n\r\n//     event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n//     event Approval(address indexed owner, address indexed spender, uint256 value);\r\n// }\r\n\r\n// interface IERC20Metadata is IERC20 {\r\n\r\n//     function name() external view returns (string memory);\r\n\r\n//     function symbol() external view returns (string memory);\r\n\r\n//     function decimals() external view returns (uint8);\r\n// }\r\n\r\n// abstract contract Context {\r\n//     function _msgSender() internal view virtual returns (address) {\r\n//         return msg.sender;\r\n//     }\r\n\r\n//     function _msgData() internal view virtual returns (bytes calldata) {\r\n//         this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n//         return msg.data;\r\n//     }\r\n// }\r\n\r\n\r\n\r\n// contract Ownable is Context {\r\n//     address private _owner;\r\n\r\n//     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n//     constructor () public {\r\n//         address msgSender = _msgSender();\r\n//         _owner = msgSender;\r\n//         emit OwnershipTransferred(address(0), msgSender);\r\n//     }\r\n\r\n//     function owner() public view returns (address) {\r\n//         return _owner;\r\n//     }\r\n\r\n//     modifier onlyOwner() {\r\n//         require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n//         _;\r\n//     }\r\n\r\n//     function renounceOwnership() public virtual onlyOwner {\r\n//         emit OwnershipTransferred(_owner, address(0));\r\n//         _owner = address(0);\r\n//     }\r\n\r\n//     function transferOwnership(address newOwner) public virtual onlyOwner {\r\n//         require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n//         emit OwnershipTransferred(_owner, newOwner);\r\n//         _owner = newOwner;\r\n//     }\r\n// }\r\n\r\n\r\n// library SafeMath {\r\n\r\n//     function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         uint256 c = a + b;\r\n//         require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n//         return c;\r\n//     }\r\n\r\n//     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         return sub(a, b, \"SafeMath: subtraction overflow\");\r\n//     }\r\n\r\n//     function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n//         require(b <= a, errorMessage);\r\n//         uint256 c = a - b;\r\n\r\n//         return c;\r\n//     }\r\n\r\n//     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n//         if (a == 0) {\r\n//             return 0;\r\n//         }\r\n\r\n//         uint256 c = a * b;\r\n//         require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n//         return c;\r\n//     }\r\n\r\n//     function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         return div(a, b, \"SafeMath: division by zero\");\r\n//     }\r\n\r\n//     function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n//         require(b > 0, errorMessage);\r\n//         uint256 c = a / b;\r\n//         // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n//         return c;\r\n//     }\r\n\r\n//     function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         return mod(a, b, \"SafeMath: modulo by zero\");\r\n//     }\r\n\r\n//     function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n//         require(b != 0, errorMessage);\r\n//         return a % b;\r\n//     }\r\n// }\r\n\r\n// // library IterableMapping {\r\n// //     // Iterable mapping from address to uint;\r\n// //     struct Map {\r\n// //         address[] keys;\r\n// //         mapping(address => uint) values;\r\n// //         mapping(address => uint) indexOf;\r\n// //         mapping(address => bool) inserted;\r\n// //     }\r\n\r\n// //     function get(Map storage map, address key) public view returns (uint) {\r\n// //         return map.values[key];\r\n// //     }\r\n\r\n// //     function getIndexOfKey(Map storage map, address key) public view returns (int) {\r\n// //         if(!map.inserted[key]) {\r\n// //             return -1;\r\n// //         }\r\n// //         return int(map.indexOf[key]);\r\n// //     }\r\n\r\n// //     function getKeyAtIndex(Map storage map, uint index) public view returns (address) {\r\n// //         return map.keys[index];\r\n// //     }\r\n\r\n\r\n\r\n// //     function size(Map storage map) public view returns (uint) {\r\n// //         return map.keys.length;\r\n// //     }\r\n\r\n// //     function set(Map storage map, address key, uint val) public {\r\n// //         if (map.inserted[key]) {\r\n// //             map.values[key] = val;\r\n// //         } else {\r\n// //             map.inserted[key] = true;\r\n// //             map.values[key] = val;\r\n// //             map.indexOf[key] = map.keys.length;\r\n// //             map.keys.push(key);\r\n// //         }\r\n// //     }\r\n\r\n// //     function remove(Map storage map, address key) public {\r\n// //         if (!map.inserted[key]) {\r\n// //             return;\r\n// //         }\r\n\r\n// //         delete map.inserted[key];\r\n// //         delete map.values[key];\r\n\r\n// //         uint index = map.indexOf[key];\r\n// //         uint lastIndex = map.keys.length - 1;\r\n// //         address lastKey = map.keys[lastIndex];\r\n\r\n// //         map.indexOf[lastKey] = index;\r\n// //         delete map.indexOf[key];\r\n\r\n// //         map.keys[index] = lastKey;\r\n// //         map.keys.pop();\r\n// //     }\r\n// // }\r\n\r\n\r\n// library SafeMathUint {\r\n//   function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n//     int256 b = int256(a);\r\n//     require(b >= 0);\r\n//     return b;\r\n//   }\r\n// }\r\n\r\n// library SafeMathInt {\r\n//     int256 private constant MIN_INT256 = int256(1) << 255;\r\n//     int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n//     function mul(int256 a, int256 b) internal pure returns (int256) {\r\n//         int256 c = a * b;\r\n\r\n//         // Detect overflow when multiplying MIN_INT256 with -1\r\n//         require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n//         require((b == 0) || (c / b == a));\r\n//         return c;\r\n//     }\r\n\r\n//     function div(int256 a, int256 b) internal pure returns (int256) {\r\n//         // Prevent overflow when dividing MIN_INT256 by -1\r\n//         require(b != -1 || a != MIN_INT256);\r\n\r\n//         // Solidity already throws when dividing by 0.\r\n//         return a / b;\r\n//     }\r\n\r\n//     function sub(int256 a, int256 b) internal pure returns (int256) {\r\n//         int256 c = a - b;\r\n//         require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n//         return c;\r\n//     }\r\n\r\n//     function add(int256 a, int256 b) internal pure returns (int256) {\r\n//         int256 c = a + b;\r\n//         require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n//         return c;\r\n//     }\r\n\r\n//     function abs(int256 a) internal pure returns (int256) {\r\n//         require(a != MIN_INT256);\r\n//         return a < 0 ? -a : a;\r\n//     }\r\n\r\n//     function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n//         require(a >= 0);\r\n//         return uint256(a);\r\n//     }\r\n// }\r\n\r\n\r\n// interface DividendPayingTokenInterface {\r\n\r\n//   function dividendOf(address _owner) external view returns(uint256);\r\n\r\n//   function distributeDividends() external payable;\r\n\r\n\r\n//   function withdrawDividend() external;\r\n\r\n//   event DividendsDistributed(\r\n//     address indexed from,\r\n//     uint256 weiAmount\r\n//   );\r\n\r\n//   event DividendWithdrawn(\r\n//     address indexed to,\r\n//     uint256 weiAmount\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n// interface DividendPayingTokenOptionalInterface {\r\n\r\n//   function withdrawableDividendOf(address _owner) external view returns(uint256);\r\n\r\n//   function withdrawnDividendOf(address _owner) external view returns(uint256);\r\n\r\n//   function accumulativeDividendOf(address _owner) external view returns(uint256);\r\n// }\r\n\r\n\r\n\r\n// interface IUniswapV2Pair {\r\n//     event Approval(address indexed owner, address indexed spender, uint value);\r\n//     event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n//     function name() external pure returns (string memory);\r\n//     function symbol() external pure returns (string memory);\r\n//     function decimals() external pure returns (uint8);\r\n//     function totalSupply() external view returns (uint);\r\n//     function balanceOf(address owner) external view returns (uint);\r\n//     function allowance(address owner, address spender) external view returns (uint);\r\n\r\n//     function approve(address spender, uint value) external returns (bool);\r\n//     function transfer(address to, uint value) external returns (bool);\r\n//     function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n//     function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n//     function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n//     function nonces(address owner) external view returns (uint);\r\n\r\n//     function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n//     event Mint(address indexed sender, uint amount0, uint amount1);\r\n//     event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n//     event Swap(\r\n//         address indexed sender,\r\n//         uint amount0In,\r\n//         uint amount1In,\r\n//         uint amount0Out,\r\n//         uint amount1Out,\r\n//         address indexed to\r\n//     );\r\n//     event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n//     function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n//     function factory() external view returns (address);\r\n//     function token0() external view returns (address);\r\n//     function token1() external view returns (address);\r\n//     function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n//     function price0CumulativeLast() external view returns (uint);\r\n//     function price1CumulativeLast() external view returns (uint);\r\n//     function kLast() external view returns (uint);\r\n\r\n//     function mint(address to) external returns (uint liquidity);\r\n//     function burn(address to) external returns (uint amount0, uint amount1);\r\n//     function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n//     function skim(address to) external;\r\n//     function sync() external;\r\n\r\n//     function initialize(address, address) external;\r\n// }\r\n\r\n\r\n\r\n// interface IUniswapV2Factory {\r\n//     event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n//     function feeTo() external view returns (address);\r\n//     function feeToSetter() external view returns (address);\r\n\r\n//     function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n//     function allPairs(uint) external view returns (address pair);\r\n//     function allPairsLength() external view returns (uint);\r\n\r\n//     function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n//     function setFeeTo(address) external;\r\n//     function setFeeToSetter(address) external;\r\n// }\r\n\r\n\r\n// interface IUniswapV2Router01 {\r\n//     function factory() external pure returns (address);\r\n//     function WETH() external pure returns (address);\r\n\r\n//     function addLiquidity(\r\n//         address tokenA,\r\n//         address tokenB,\r\n//         uint amountADesired,\r\n//         uint amountBDesired,\r\n//         uint amountAMin,\r\n//         uint amountBMin,\r\n//         address to,\r\n//         uint deadline\r\n//     ) external returns (uint amountA, uint amountB, uint liquidity);\r\n//     function addLiquidityETH(\r\n//         address token,\r\n//         uint amountTokenDesired,\r\n//         uint amountTokenMin,\r\n//         uint amountETHMin,\r\n//         address to,\r\n//         uint deadline\r\n//     ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n//     function removeLiquidity(\r\n//         address tokenA,\r\n//         address tokenB,\r\n//         uint liquidity,\r\n//         uint amountAMin,\r\n//         uint amountBMin,\r\n//         address to,\r\n//         uint deadline\r\n//     ) external returns (uint amountA, uint amountB);\r\n//     function removeLiquidityETH(\r\n//         address token,\r\n//         uint liquidity,\r\n//         uint amountTokenMin,\r\n//         uint amountETHMin,\r\n//         address to,\r\n//         uint deadline\r\n//     ) external returns (uint amountToken, uint amountETH);\r\n//     function removeLiquidityWithPermit(\r\n//         address tokenA,\r\n//         address tokenB,\r\n//         uint liquidity,\r\n//         uint amountAMin,\r\n//         uint amountBMin,\r\n//         address to,\r\n//         uint deadline,\r\n//         bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n//     ) external returns (uint amountA, uint amountB);\r\n//     function removeLiquidityETHWithPermit(\r\n//         address token,\r\n//         uint liquidity,\r\n//         uint amountTokenMin,\r\n//         uint amountETHMin,\r\n//         address to,\r\n//         uint deadline,\r\n//         bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n//     ) external returns (uint amountToken, uint amountETH);\r\n//     function swapExactTokensForTokens(\r\n//         uint amountIn,\r\n//         uint amountOutMin,\r\n//         address[] calldata path,\r\n//         address to,\r\n//         uint deadline\r\n//     ) external returns (uint[] memory amounts);\r\n//     function swapTokensForExactTokens(\r\n//         uint amountOut,\r\n//         uint amountInMax,\r\n//         address[] calldata path,\r\n//         address to,\r\n//         uint deadline\r\n//     ) external returns (uint[] memory amounts);\r\n//     function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n//         external\r\n//         payable\r\n//         returns (uint[] memory amounts);\r\n//     function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n//         external\r\n//         returns (uint[] memory amounts);\r\n//     function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n//         external\r\n//         returns (uint[] memory amounts);\r\n//     function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n//         external\r\n//         payable\r\n//         returns (uint[] memory amounts);\r\n\r\n//     function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n//     function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n//     function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n//     function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n//     function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n// }\r\n\r\n\r\n// interface IUniswapV2Router02 is IUniswapV2Router01 {\r\n//     function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n//         address token,\r\n//         uint liquidity,\r\n//         uint amountTokenMin,\r\n//         uint amountETHMin,\r\n//         address to,\r\n//         uint deadline\r\n//     ) external returns (uint amountETH);\r\n//     function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n//         address token,\r\n//         uint liquidity,\r\n//         uint amountTokenMin,\r\n//         uint amountETHMin,\r\n//         address to,\r\n//         uint deadline,\r\n//         bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n//     ) external returns (uint amountETH);\r\n\r\n//     function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n//         uint amountIn,\r\n//         uint amountOutMin,\r\n//         address[] calldata path,\r\n//         address to,\r\n//         uint deadline\r\n//     ) external;\r\n//     function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n//         uint amountOutMin,\r\n//         address[] calldata path,\r\n//         address to,\r\n//         uint deadline\r\n//     ) external payable;\r\n//     function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n//         uint amountIn,\r\n//         uint amountOutMin,\r\n//         address[] calldata path,\r\n//         address to,\r\n//         uint deadline\r\n//     ) external;\r\n// }\r\n\r\n// contract ERC20 is Context, IERC20, IERC20Metadata {\r\n//     using SafeMath for uint256;\r\n\r\n//     mapping(address => uint256) private _balances;\r\n\r\n//     mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n//     uint256 private _totalSupply;\r\n\r\n//     string private _name;\r\n//     string private _symbol;\r\n\r\n//     constructor(string memory name_, string memory symbol_) public {\r\n//         _name = name_;\r\n//         _symbol = symbol_;\r\n//     }\r\n\r\n//     function name() public view virtual override returns (string memory) {\r\n//         return _name;\r\n//     }\r\n\r\n//     function symbol() public view virtual override returns (string memory) {\r\n//         return _symbol;\r\n//     }\r\n\r\n//     function decimals() public view virtual override returns (uint8) {\r\n//         return 18;\r\n//     }\r\n\r\n//     function totalSupply() public view virtual override returns (uint256) {\r\n//         return _totalSupply;\r\n//     }\r\n\r\n//     function balanceOf(address account) public view virtual override returns (uint256) {\r\n//         return _balances[account];\r\n//     }\r\n\r\n//     function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n//         _transfer(_msgSender(), recipient, amount);\r\n//         return true;\r\n//     }\r\n\r\n//     function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n//         return _allowances[owner][spender];\r\n//     }\r\n\r\n//     function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n//         _approve(_msgSender(), spender, amount);\r\n//         return true;\r\n//     }\r\n\r\n//     function transferFrom(\r\n//         address sender,\r\n//         address recipient,\r\n//         uint256 amount\r\n//     ) public virtual override returns (bool) {\r\n//         _transfer(sender, recipient, amount);\r\n//         _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n//         return true;\r\n//     }\r\n\r\n//     function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n//         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n//         return true;\r\n//     }\r\n\r\n//     function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n//         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n//         return true;\r\n//     }\r\n\r\n//     function _transfer(\r\n//         address sender,\r\n//         address recipient,\r\n//         uint256 amount\r\n//     ) internal virtual {\r\n//         require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n//         require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n//         _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n//         _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n//         _balances[recipient] = _balances[recipient].add(amount);\r\n//         emit Transfer(sender, recipient, amount);\r\n//     }\r\n\r\n//     function _mint(address account, uint256 amount) internal virtual {\r\n//         require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n//         _beforeTokenTransfer(address(0), account, amount);\r\n\r\n//         _totalSupply = _totalSupply.add(amount);\r\n//         _balances[account] = _balances[account].add(amount);\r\n//         emit Transfer(address(0), account, amount);\r\n//     }\r\n\r\n//     function _burn(address account, uint256 amount) internal virtual {\r\n//         require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n//         _beforeTokenTransfer(account, address(0), amount);\r\n\r\n//         _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n//         _totalSupply = _totalSupply.sub(amount);\r\n//         emit Transfer(account, address(0), amount);\r\n//     }\r\n\r\n//     function _approve(\r\n//         address owner,\r\n//         address spender,\r\n//         uint256 amount\r\n//     ) internal virtual {\r\n//         require(owner != address(0), \"ERC20: approve from the zero address\");\r\n//         require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n//         _allowances[owner][spender] = amount;\r\n//         emit Approval(owner, spender, amount);\r\n//     }\r\n\r\n//     function _beforeTokenTransfer(\r\n//         address from,\r\n//         address to,\r\n//         uint256 amount\r\n//     ) internal virtual {}\r\n// }\r\n\r\n\r\n// /// @title Dividend-Paying Token\r\n\r\n\r\n// contract DividendPayingToken is ERC20, DividendPayingTokenInterface, DividendPayingTokenOptionalInterface {\r\n//   using SafeMath for uint256;\r\n//   using SafeMathUint for uint256;\r\n//   using SafeMathInt for int256;\r\n\r\n//   uint256 constant internal magnitude = 2**128;\r\n\r\n//   uint256 internal magnifiedDividendPerShare;\r\n\r\n//   mapping(address => int256) internal magnifiedDividendCorrections;\r\n//   mapping(address => uint256) internal withdrawnDividends;\r\n\r\n//   uint256 public totalDividendsDistributed;\r\n\r\n//   constructor(string memory _name, string memory _symbol) public ERC20(_name, _symbol) {\r\n\r\n//   }\r\n\r\n//   receive() external payable {\r\n//     distributeDividends();\r\n//   }\r\n\r\n//   function distributeDividends() public override payable {\r\n//     require(totalSupply() > 0);\r\n\r\n//     if (msg.value > 0) {\r\n//       magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n//         (msg.value).mul(magnitude) / totalSupply()\r\n//       );\r\n//       emit DividendsDistributed(msg.sender, msg.value);\r\n\r\n//       totalDividendsDistributed = totalDividendsDistributed.add(msg.value);\r\n//     }\r\n//   }\r\n\r\n//   function withdrawDividend() public virtual override {\r\n//     _withdrawDividendOfUser(msg.sender);\r\n//   }\r\n\r\n//   function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n//     uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n//     if (_withdrawableDividend > 0) {\r\n//       withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n//       emit DividendWithdrawn(user, _withdrawableDividend);\r\n//       (bool success,) = user.call{value: _withdrawableDividend, gas: 3000}(\"\");\r\n\r\n//       if(!success) {\r\n//         withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n//         return 0;\r\n//       }\r\n\r\n//       return _withdrawableDividend;\r\n//     }\r\n\r\n//     return 0;\r\n//   }\r\n\r\n//   function dividendOf(address _owner) public view override returns(uint256) {\r\n//     return withdrawableDividendOf(_owner);\r\n//   }\r\n\r\n//   function withdrawableDividendOf(address _owner) public view override returns(uint256) {\r\n//     return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n//   }\r\n\r\n//   function withdrawnDividendOf(address _owner) public view override returns(uint256) {\r\n//     return withdrawnDividends[_owner];\r\n//   }\r\n\r\n//   function accumulativeDividendOf(address _owner) public view override returns(uint256) {\r\n//     return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n//       .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n//   }\r\n\r\n//   function _transfer(address from, address to, uint256 value) internal virtual override {\r\n//     require(false);\r\n\r\n//     int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\r\n//     magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\r\n//     magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\r\n//   }\r\n\r\n//   function _mint(address account, uint256 value) internal override {\r\n//     super._mint(account, value);\r\n\r\n//     magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n//       .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n//   }\r\n\r\n//   function _burn(address account, uint256 value) internal override {\r\n//     super._burn(account, value);\r\n\r\n//     magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n//       .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n//   }\r\n\r\n//   function _setBalance(address account, uint256 newBalance) internal {\r\n//     uint256 currentBalance = balanceOf(account);\r\n\r\n//     if(newBalance > currentBalance) {\r\n//       uint256 mintAmount = newBalance.sub(currentBalance);\r\n//       _mint(account, mintAmount);\r\n//     } else if(newBalance < currentBalance) {\r\n//       uint256 burnAmount = currentBalance.sub(newBalance);\r\n//       _burn(account, burnAmount);\r\n//     }\r\n//   }\r\n// }\r\n\r\n// contract dETH is ERC20, Ownable {\r\n//     using SafeMath for uint256;\r\n    \r\n//      /// constants\r\n//     uint256 public constant MAX_FEE_RATE = 20;\r\n\r\n//     IUniswapV2Router02 public uniswapV2Router;\r\n//     address public immutable uniswapV2Pair;\r\n\r\n//     bool private swapping;\r\n\r\n//     dETHDividendTracker public dividendTracker;\r\n\r\n//     address public liquidityWallet;\r\n\r\n//     uint256 public maxSellTransactionAmount = 10000000 * (10**18);\r\n//     uint256 public swapTokensAtAmount = 100 * (10**18);\r\n\r\n//     address public marketingWallet  = address(0x72D57A858A619CF05B4755968A094Cad93f13986); //Mainnet\r\n    \r\n//     uint256 public  ETHRewardsFee;\r\n//     uint256 public  liquidityFee;\r\n//     uint256 public  marketingFee;\r\n//     uint256 public  totalFees;\r\n\r\n//     // Can be used to set a multiplier for sell swaps\r\n//     uint256 public immutable sellFeeIncreaseFactor = 100; \r\n\r\n//     // use by default 300,000 gas to process auto-claiming dividends\r\n//     uint256 public gasForProcessing = 300000;\r\n\r\n\r\n\r\n//     bool public tradingIsEnabled = false;\r\n\r\n//     // exlcude from fees and max transaction amount\r\n//     mapping (address => bool) private _isExcludedFromFees;\r\n\r\n//     // addresses that can make transfers before presale is over\r\n//     mapping (address => bool) private canTransferBeforeTradingIsEnabled;\r\n\r\n//     // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n//     // could be subject to a maximum transfer amount\r\n//     mapping (address => bool) public automatedMarketMakerPairs;\r\n    \r\n//     event marketingWalletUpdated(address indexed newmarketingWallet, address indexed oldmarketingWallet);\r\n//     event UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);\r\n\r\n//     event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n\r\n//     event ExcludeFromFees(address indexed account, bool isExcluded);\r\n//     event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\r\n\r\n//     event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n//     event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\r\n\r\n//     event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n\r\n//     event SwapAndLiquify(\r\n//         uint256 tokensSwapped,\r\n//         uint256 ethReceived,\r\n//         uint256 tokensIntoLiqudity\r\n//     );\r\n\r\n//     event SendDividends(\r\n//     \tuint256 tokensSwapped,\r\n//     \tuint256 amount\r\n//     );\r\n\r\n//     event ProcessedDividendTracker(\r\n//     \tuint256 iterations,\r\n//     \tuint256 claims,\r\n//         uint256 lastProcessedIndex,\r\n//     \tbool indexed automatic,\r\n//     \tuint256 gas,\r\n//     \taddress indexed processor\r\n//     );\r\n\r\n//     constructor(address _router) public ERC20(\"Degen ETH\", \"dETH\") {\r\n//         uint256 _ETHRewardsFee = 6;\r\n//         uint256 _liquidityFee = 6;\r\n//         uint256 _marketingFee = 8;\r\n\r\n//         ETHRewardsFee = _ETHRewardsFee;\r\n//         liquidityFee = _liquidityFee;\r\n//         marketingFee = _marketingFee;\r\n//         totalFees = _ETHRewardsFee.add(_liquidityFee).add(_marketingFee);\r\n\r\n\r\n//     \tdividendTracker = new dETHDividendTracker();\r\n        \r\n\r\n//     \tliquidityWallet = owner();\r\n\r\n//     \tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(payable(address(_router))); //ZipSwap V2 Router: 0xE6Df0BB08e5A97b40B21950a0A51b94c4DbA0Ff6\r\n//          // Create a uniswap pair for this new token\r\n//         // address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n//         //     .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n//         uniswapV2Router = _uniswapV2Router;\r\n//         // uniswapV2Pair = _uniswapV2Pair;\r\n\r\n//         _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n \r\n\r\n//         // exclude from receiving dividends\r\n//         dividendTracker.excludeFromDividends(address(dividendTracker));\r\n//         dividendTracker.excludeFromDividends(address(this));\r\n//         dividendTracker.excludeFromDividends(owner());\r\n//         dividendTracker.excludeFromDividends(address(_uniswapV2Router));\r\n  \r\n\r\n//         // exclude from paying fees or having max transaction amount\r\n//         excludeFromFees(liquidityWallet, true);\r\n//         excludeFromFees(address(this), true);\r\n\r\n//         // enable owner and fixed-sale wallet to send tokens before presales are over\r\n//         canTransferBeforeTradingIsEnabled[owner()] = true;\r\n\r\n//         /*\r\n//             _mint is an internal function in ERC20.sol that is only called here,\r\n//             and CANNOT be called ever again\r\n//         */\r\n//         _mint(owner(), 10000000 * (10**18));\r\n//     }\r\n\r\n//     receive() external payable {\r\n\r\n//   \t}\r\n\r\n//     function setPair(address _pair) public onlyOwner {\r\n        \r\n//     }\r\n\r\n//     function updateDividendTracker(address newAddress) public onlyOwner {\r\n//         require(newAddress != address(dividendTracker), \"dETH: The dividend tracker already has that address\");\r\n\r\n//         dETHDividendTracker newDividendTracker = dETHDividendTracker(payable(newAddress));\r\n\r\n//         require(newDividendTracker.owner() == address(this), \"dETH: The new dividend tracker must be owned by the dETH token contract\");\r\n\r\n//         newDividendTracker.excludeFromDividends(address(newDividendTracker));\r\n//         newDividendTracker.excludeFromDividends(address(this));\r\n//         newDividendTracker.excludeFromDividends(owner());\r\n//         newDividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n\r\n//         emit UpdateDividendTracker(newAddress, address(dividendTracker));\r\n\r\n//         dividendTracker = newDividendTracker;\r\n//     }\r\n    \r\n//     function setMaxSellTransaction(uint256 _maxTxn) external onlyOwner {\r\n//         maxSellTransactionAmount = _maxTxn * (10**18);\r\n//     }\r\n\r\n//     function setSwapTokensAtAmount(uint256 _swapAmount) external onlyOwner {\r\n//         swapTokensAtAmount = _swapAmount * (10**18);\r\n//     }\r\n    \r\n//     function updateMinimumBalanceForDividends(uint256 newMinimumBalance) external onlyOwner {\r\n        \r\n//         dividendTracker.updateMinimumTokenBalanceForDividends(newMinimumBalance);\r\n//     }\r\n\r\n//     function updateUniswapV2Router(address newAddress) public onlyOwner {\r\n//         require(newAddress != address(uniswapV2Router), \"dETH: The router already has that address\");\r\n//         emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n//         uniswapV2Router = IUniswapV2Router02(newAddress);\r\n//     }\r\n\r\n//     function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n//         require(_isExcludedFromFees[account] != excluded, \"dETH: Account is already the value of 'excluded'\");\r\n//         _isExcludedFromFees[account] = excluded;\r\n\r\n//         emit ExcludeFromFees(account, excluded);\r\n//     }\r\n\r\n//     function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n//         for(uint256 i = 0; i < accounts.length; i++) {\r\n//             _isExcludedFromFees[accounts[i]] = excluded;\r\n//         }\r\n\r\n//         emit ExcludeMultipleAccountsFromFees(accounts, excluded);\r\n//     }\r\n\r\n\r\n//     function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n//         require(pair != uniswapV2Pair, \"dETH: The UniV2 pair cannot be removed from automatedMarketMakerPairs\");\r\n\r\n//         _setAutomatedMarketMakerPair(pair, value);\r\n//     }\r\n\r\n//     function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n//         require(automatedMarketMakerPairs[pair] != value, \"dETH: Automated market maker pair is already set to that value\");\r\n//         automatedMarketMakerPairs[pair] = value;\r\n\r\n//         if(value) {\r\n//             dividendTracker.excludeFromDividends(pair);\r\n//         }\r\n\r\n//         emit SetAutomatedMarketMakerPair(pair, value);\r\n//     }\r\n\r\n\r\n//     function updateLiquidityWallet(address newLiquidityWallet) public onlyOwner {\r\n//         require(newLiquidityWallet != liquidityWallet, \"dETH: The liquidity wallet is already this address\");\r\n//         excludeFromFees(newLiquidityWallet, true);\r\n//         emit LiquidityWalletUpdated(newLiquidityWallet, liquidityWallet);\r\n//         liquidityWallet = newLiquidityWallet;\r\n//     }\r\n\r\n//     function updateGasForProcessing(uint256 newValue) public onlyOwner {\r\n//         require(newValue >= 200000 && newValue <= 500000, \"dETH: gasForProcessing must be between 200,000 and 500,000\");\r\n//         require(newValue != gasForProcessing, \"dETH: Cannot update gasForProcessing to same value\");\r\n//         emit GasForProcessingUpdated(newValue, gasForProcessing);\r\n//         gasForProcessing = newValue;\r\n//     }\r\n\r\n//     function updateClaimWait(uint256 claimWait) external onlyOwner {\r\n//         dividendTracker.updateClaimWait(claimWait);\r\n//     }\r\n\r\n//     function updateBNBRewardsFee(uint8 newFee) external onlyOwner {\r\n//         require(newFee <= MAX_FEE_RATE, \"wrong\");\r\n//         ETHRewardsFee = newFee;\r\n//         totalFees = ETHRewardsFee.add(marketingFee).add(liquidityFee);\r\n//     }\r\n\r\n//     function updateMarketingFee(uint8 newFee) external onlyOwner {\r\n//         require(newFee <= MAX_FEE_RATE, \"wrong\");\r\n//         marketingFee = newFee;\r\n//         totalFees = ETHRewardsFee.add(marketingFee).add(liquidityFee);\r\n//     }\r\n\r\n//     function updateLiquidityFee(uint8 newFee) external onlyOwner {\r\n//         require(newFee <= MAX_FEE_RATE, \"wrong\");\r\n//         liquidityFee = newFee;\r\n//         totalFees = ETHRewardsFee.add(marketingFee).add(liquidityFee);\r\n//     }\r\n    \r\n//     function getClaimWait() external view returns(uint256) {\r\n//         return dividendTracker.claimWait();\r\n//     }\r\n\r\n//     function getTotalDividendsDistributed() external view returns (uint256) {\r\n//         return dividendTracker.totalDividendsDistributed();\r\n//     }\r\n\r\n//     function isExcludedFromFees(address account) public view returns(bool) {\r\n//         return _isExcludedFromFees[account];\r\n//     }\r\n\r\n//     function withdrawableDividendOf(address account) public view returns(uint256) {\r\n//     \treturn dividendTracker.withdrawableDividendOf(account);\r\n//   \t}\r\n\r\n// \tfunction dividendTokenBalanceOf(address account) public view returns (uint256) {\r\n// \t\treturn dividendTracker.balanceOf(account);\r\n// \t}\r\n\r\n//     function getAccountDividendsInfo(address account)\r\n//         external view returns (\r\n//             address,\r\n//             int256,\r\n//             int256,\r\n//             uint256,\r\n//             uint256,\r\n//             uint256,\r\n//             uint256,\r\n//             uint256) {\r\n//         return dividendTracker.getAccount(account);\r\n//     }\r\n\r\n// \tfunction getAccountDividendsInfoAtIndex(uint256 index)\r\n//         external view returns (\r\n//             address,\r\n//             int256,\r\n//             int256,\r\n//             uint256,\r\n//             uint256,\r\n//             uint256,\r\n//             uint256,\r\n//             uint256) {\r\n//     \treturn dividendTracker.getAccountAtIndex(index);\r\n//     }\r\n\r\n// \tfunction processDividendTracker(uint256 gas) external {\r\n// \t\t(uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);\r\n// \t\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\r\n//     }\r\n\r\n//     function claim() external {\r\n// \t\tdividendTracker.processAccount(msg.sender, false);\r\n//     }\r\n\r\n//     function getLastProcessedIndex() external view returns(uint256) {\r\n//     \treturn dividendTracker.getLastProcessedIndex();\r\n//     }\r\n\r\n//     function getNumberOfDividendTokenHolders() external view returns(uint256) {\r\n//         return dividendTracker.getNumberOfTokenHolders();\r\n//     }\r\n\r\n//     function getTradingIsEnabled() public view returns (bool) {\r\n//         return tradingIsEnabled;\r\n//     }\r\n\r\n//     function _transfer(\r\n//         address from,\r\n//         address to,\r\n//         uint256 amount\r\n//     ) internal override {\r\n//         require(from != address(0), \"ERC20: transfer from the zero address\");\r\n//         require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\r\n//         // only whitelisted addresses can make transfers after the fixed-sale has started\r\n//         // and before the public presale is over\r\n//         if(!tradingIsEnabled) {\r\n//             require(canTransferBeforeTradingIsEnabled[from], \"dETH: This account cannot send tokens until trading is enabled\");\r\n//         }\r\n\r\n//         if(amount == 0) {\r\n//             super._transfer(from, to, 0);\r\n//             return;\r\n//         }\r\n\r\n//         if( \r\n//         \t!swapping &&\r\n//         \ttradingIsEnabled &&\r\n//             automatedMarketMakerPairs[to] && // sells only by detecting transfer to automated market maker pair\r\n//         \tfrom != address(uniswapV2Router) && //router -> pair is removing liquidity which shouldn't have max\r\n//             !_isExcludedFromFees[to] //no max for those excluded from fees\r\n//         ) {\r\n//             require(amount <= maxSellTransactionAmount, \"Sell transfer amount exceeds the maxSellTransactionAmount.\");\r\n//         }\r\n\r\n// \t\tuint256 contractTokenBalance = balanceOf(address(this));\r\n        \r\n//         bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n//         if(\r\n//             tradingIsEnabled && \r\n//             canSwap &&\r\n//             !swapping &&\r\n//             !automatedMarketMakerPairs[from] &&\r\n//             from != liquidityWallet &&\r\n//             to != liquidityWallet\r\n//         ) {\r\n//             swapping = true;\r\n\r\n//             uint256 swapTokens = contractTokenBalance.mul(liquidityFee).div(totalFees);\r\n//             swapAndLiquify(swapTokens);\r\n            \r\n//             uint256 swapMarketingTokens = contractTokenBalance.mul(marketingFee).div(totalFees);\r\n//             swapAndSendMarketingETH(swapMarketingTokens);\r\n\r\n//             uint256 sellTokens = balanceOf(address(this));\r\n//             swapAndSendDividends(sellTokens);\r\n\r\n//             swapping = false;\r\n//         }\r\n\r\n\r\n//         bool takeFee = tradingIsEnabled && !swapping;\r\n\r\n//         // if any account belongs to _isExcludedFromFee account then remove the fee\r\n//         if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n//             takeFee = false;\r\n//         }\r\n\r\n//         if(takeFee) {\r\n//         \tuint256 fees = amount.mul(totalFees).div(100);\r\n\r\n//             // if sell, multiply by 1.2\r\n//             if(automatedMarketMakerPairs[to]) {\r\n//                 fees = fees.mul(sellFeeIncreaseFactor).div(100);\r\n//             }\r\n\r\n//         \tamount = amount.sub(fees);\r\n\r\n//             super._transfer(from, address(this), fees);\r\n//         }\r\n\r\n//         super._transfer(from, to, amount);\r\n\r\n//         try dividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n//         try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n\r\n//         if(!swapping) {\r\n// \t    \tuint256 gas = gasForProcessing;\r\n\r\n// \t    \ttry dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n// \t    \t\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n// \t    \t} \r\n// \t    \tcatch {\r\n\r\n// \t    \t}\r\n//         }\r\n//     }\r\n\r\n//     function Launch() external onlyOwner {\r\n//   \t require(!tradingIsEnabled);\r\n// \t  tradingIsEnabled = true;\r\n//   \t}\r\n\r\n//     function SetcanTransferBeforeTradingIsEnabled(address _Wallet) external onlyOwner {\r\n         \r\n//         dividendTracker.excludeFromDividends(_Wallet);\r\n//         excludeFromFees(_Wallet, true);\r\n//         canTransferBeforeTradingIsEnabled[_Wallet] = true;         \r\n//     }\r\n\r\n//     function updatemarketingWallet(address newmarketingWallet) public  onlyOwner {\r\n//         require(newmarketingWallet != marketingWallet, \"dETH: The marketing wallet is already this address\");   \r\n//         emit marketingWalletUpdated(newmarketingWallet, marketingWallet);\r\n//         marketingWallet = newmarketingWallet;\r\n//     }\r\n    \r\n\r\n//     function swapAndLiquify(uint256 tokens) private {\r\n//         // split the contract balance into halves\r\n//         uint256 half = tokens.div(2);\r\n//         uint256 otherHalf = tokens.sub(half);\r\n\r\n//         // capture the contract's current ETH balance.\r\n//         // this is so that we can capture exactly the amount of ETH that the\r\n//         // swap creates, and not make the liquidity event include any ETH that\r\n//         // has been manually sent to the contract\r\n//         uint256 initialBalance = address(this).balance;\r\n\r\n//         // swap tokens for ETH\r\n//         swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n//         // how much ETH did we just swap into?\r\n//         uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n//         // add liquidity to uniswap\r\n//         addLiquidity(otherHalf, newBalance);\r\n        \r\n//         emit SwapAndLiquify(half, newBalance, otherHalf);\r\n//     }\r\n\r\n//     function swapTokensForEth(uint256 tokenAmount) private {\r\n\r\n        \r\n//         // generate the uniswap pair path of token -> weth\r\n//         address[] memory path = new address[](2);\r\n//         path[0] = address(this);\r\n//         path[1] = uniswapV2Router.WETH();\r\n\r\n//         _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n//         // make the swap\r\n//         uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n//             tokenAmount,\r\n//             0, // accept any amount of ETH\r\n//             path,\r\n//             address(this),\r\n//             block.timestamp\r\n//         );\r\n        \r\n//     }\r\n    \r\n//     function swapAndSendMarketingETH(uint256 tokenAmount) private {\r\n\r\n        \r\n//         // generate the uniswap pair path of token -> weth\r\n//         address[] memory path = new address[](2);\r\n//         path[0] = address(this);\r\n//         path[1] = uniswapV2Router.WETH();\r\n\r\n//         _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n//         // make the swap\r\n//         uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n//             tokenAmount,\r\n//             0, // accept any amount of ETH\r\n//             path,\r\n//             marketingWallet,\r\n//             block.timestamp\r\n//         );\r\n        \r\n//     }\r\n    \r\n\r\n//     function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        \r\n//         // approve token transfer to cover all possible scenarios\r\n//         _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n//         // add the liquidity\r\n//         uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n//             address(this),\r\n//             tokenAmount,\r\n//             0, // slippage is unavoidable\r\n//             0, // slippage is unavoidable\r\n//             liquidityWallet,\r\n//             block.timestamp\r\n//         );\r\n        \r\n//     }\r\n\r\n//     function swapAndSendDividends(uint256 tokens) private {\r\n//         swapTokensForEth(tokens);\r\n//         uint256 dividends = address(this).balance;\r\n//         (bool success,) = address(dividendTracker).call{value: dividends}(\"\");\r\n\r\n//         if(success) {\r\n//    \t \t\temit SendDividends(tokens, dividends);\r\n//         }\r\n//     }\r\n// }\r\n\r\n// contract dETHDividendTracker is DividendPayingToken, Ownable {\r\n//     using SafeMath for uint256;\r\n//     using SafeMathInt for int256;\r\n//     using IterableMapping for IterableMapping.Map;\r\n\r\n//     IterableMapping.Map private tokenHoldersMap;\r\n//     uint256 public lastProcessedIndex;\r\n\r\n//     mapping (address => bool) public excludedFromDividends;\r\n\r\n//     mapping (address => uint256) public lastClaimTimes;\r\n\r\n//     uint256 public claimWait;\r\n//     uint256 public  minimumTokenBalanceForDividends;\r\n\r\n//     event ExcludeFromDividends(address indexed account);\r\n//     event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n//     event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n\r\n//     constructor() public DividendPayingToken(\"dETH_Dividend_Tracker\", \"dETH_Dividend_Tracker\") {\r\n//     \tclaimWait = 60;\r\n//         minimumTokenBalanceForDividends = 1 * (10**18); //must hold 10000+ tokens\r\n//     }\r\n\r\n//     function _transfer(address, address, uint256) internal override {\r\n//         require(false, \"dETH_Dividend_Tracker: No transfers allowed\");\r\n//     }\r\n\r\n//     function withdrawDividend() public override {\r\n//         require(false, \"dETH_Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main dETH contract.\");\r\n//     }\r\n\r\n//     function updateMinimumTokenBalanceForDividends(uint256 _newMinimumBalance) external onlyOwner {\r\n//         minimumTokenBalanceForDividends = _newMinimumBalance * (10**18);\r\n//     }\r\n    \r\n//     function excludeFromDividends(address account) external onlyOwner {\r\n//     \trequire(!excludedFromDividends[account]);\r\n//     \texcludedFromDividends[account] = true;\r\n\r\n//     \t_setBalance(account, 0);\r\n//     \ttokenHoldersMap.remove(account);\r\n\r\n//     \temit ExcludeFromDividends(account);\r\n//     }\r\n\r\n//     function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n//         require(newClaimWait >= 60 && newClaimWait <= 600, \"dETH_Dividend_Tracker: claimWait must be updated to between 1 and 10 minutes\");\r\n//         require(newClaimWait != claimWait, \"dETH_Dividend_Tracker: Cannot update claimWait to same value\");\r\n//         emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n//         claimWait = newClaimWait;\r\n//     }\r\n\r\n//     function getLastProcessedIndex() external view returns(uint256) {\r\n//     \treturn lastProcessedIndex;\r\n//     }\r\n\r\n//     function getNumberOfTokenHolders() external view returns(uint256) {\r\n//         return tokenHoldersMap.keys.length;\r\n//     }\r\n\r\n\r\n\r\n//     function getAccount(address _account)\r\n//         public view returns (\r\n//             address account,\r\n//             int256 index,\r\n//             int256 iterationsUntilProcessed,\r\n//             uint256 withdrawableDividends,\r\n//             uint256 totalDividends,\r\n//             uint256 lastClaimTime,\r\n//             uint256 nextClaimTime,\r\n//             uint256 secondsUntilAutoClaimAvailable) {\r\n//         account = _account;\r\n\r\n//         index = tokenHoldersMap.getIndexOfKey(account);\r\n\r\n//         iterationsUntilProcessed = -1;\r\n\r\n//         if(index >= 0) {\r\n//             if(uint256(index) > lastProcessedIndex) {\r\n//                 iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n//             }\r\n//             else {\r\n//                 uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?\r\n//                                                         tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\r\n//                                                         0;\r\n\r\n\r\n//                 iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n//             }\r\n//         }\r\n\r\n\r\n//         withdrawableDividends = withdrawableDividendOf(account);\r\n//         totalDividends = accumulativeDividendOf(account);\r\n\r\n//         lastClaimTime = lastClaimTimes[account];\r\n\r\n//         nextClaimTime = lastClaimTime > 0 ?\r\n//                                     lastClaimTime.add(claimWait) :\r\n//                                     0;\r\n\r\n//         secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\r\n//                                                     nextClaimTime.sub(block.timestamp) :\r\n//                                                     0;\r\n//     }\r\n\r\n//     function getAccountAtIndex(uint256 index)\r\n//         public view returns (\r\n//             address,\r\n//             int256,\r\n//             int256,\r\n//             uint256,\r\n//             uint256,\r\n//             uint256,\r\n//             uint256,\r\n//             uint256) {\r\n//     \tif(index >= tokenHoldersMap.size()) {\r\n//             return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\r\n//         }\r\n\r\n//         address account = tokenHoldersMap.getKeyAtIndex(index);\r\n\r\n//         return getAccount(account);\r\n//     }\r\n\r\n//     function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n//     \tif(lastClaimTime > block.timestamp)  {\r\n//     \t\treturn false;\r\n//     \t}\r\n\r\n//     \treturn block.timestamp.sub(lastClaimTime) >= claimWait;\r\n//     }\r\n\r\n//     function setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n//     \tif(excludedFromDividends[account]) {\r\n//     \t\treturn;\r\n//     \t}\r\n\r\n//     \tif(newBalance >= minimumTokenBalanceForDividends) {\r\n//             _setBalance(account, newBalance);\r\n//     \t\ttokenHoldersMap.set(account, newBalance);\r\n//     \t}\r\n//     \telse {\r\n//             _setBalance(account, 0);\r\n//     \t\ttokenHoldersMap.remove(account);\r\n//     \t}\r\n\r\n//     \tprocessAccount(account, true);\r\n//     }\r\n\r\n//     function process(uint256 gas) public returns (uint256, uint256, uint256) {\r\n//     \tuint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n//     \tif(numberOfTokenHolders == 0) {\r\n//     \t\treturn (0, 0, lastProcessedIndex);\r\n//     \t}\r\n\r\n//     \tuint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n//     \tuint256 gasUsed = 0;\r\n\r\n//     \tuint256 gasLeft = gasleft();\r\n\r\n//     \tuint256 iterations = 0;\r\n//     \tuint256 claims = 0;\r\n\r\n//     \twhile(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n//     \t\t_lastProcessedIndex++;\r\n\r\n//     \t\tif(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n//     \t\t\t_lastProcessedIndex = 0;\r\n//     \t\t}\r\n\r\n//     \t\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n//     \t\tif(canAutoClaim(lastClaimTimes[account])) {\r\n//     \t\t\tif(processAccount(payable(account), true)) {\r\n//     \t\t\t\tclaims++;\r\n//     \t\t\t}\r\n//     \t\t}\r\n\r\n//     \t\titerations++;\r\n\r\n//     \t\tuint256 newGasLeft = gasleft();\r\n\r\n//     \t\tif(gasLeft > newGasLeft) {\r\n//     \t\t\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n//     \t\t}\r\n\r\n//     \t\tgasLeft = newGasLeft;\r\n//     \t}\r\n\r\n//     \tlastProcessedIndex = _lastProcessedIndex;\r\n\r\n//     \treturn (iterations, claims, lastProcessedIndex);\r\n//     }\r\n\r\n//     function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n//         uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n//     \tif(amount > 0) {\r\n//     \t\tlastClaimTimes[account] = block.timestamp;\r\n//             emit Claim(account, amount, automatic);\r\n//     \t\treturn true;\r\n//     \t}\r\n\r\n//     \treturn false;\r\n//     }\r\n// }"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"errors": [
			{
				"component": "general",
				"errorCode": "3420",
				"formattedMessage": "contracts/dETH.sol: Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.6.12;\"\n",
				"message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.6.12;\"",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "contracts/dETH.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/dETH.sol": {
				"ast": {
					"absolutePath": "contracts/dETH.sol",
					"exportedSymbols": {},
					"id": 1,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [],
					"src": "52610:0:0"
				},
				"id": 0
			}
		}
	}
}